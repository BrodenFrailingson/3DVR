#version 410 core
layout (triangles) in;
layout (triangle_strip, max_vertices = 102) out;

in VS_OUT {
	vec3 color;
} gs_in[];

uniform mat4 matrix;

const float radius = 0.008;
const float PI = 3.14159;
const float HALF_PI = 1.57079;
const int division = 10;


out vec4 vertexColor;

void Build_Sphere(vec4 pos)
{
	
	float longitude;
	float latitude;
	float x, y, z;
	
	for(int i = 0; i < division; i++)
	{
		longitude = -PI + (i - 0) * (PI + PI) / (division - 0);
		for(int j = 0; j < division; j++)
		{
			latitude = -HALF_PI + (j - 0) * (HALF_PI + HALF_PI) / (division - 0); //vertex 1
			x = radius * sin(longitude) * cos(latitude);
			y = radius * sin(longitude) * sin(latitude);
			z = radius * cos(longitude);
			gl_Position = pos + vec4(x,y,z, 0.0);
			EmitVertex();

		}
	}
	EndPrimitive();
}



void main()
{
	vertexColor = vec4(gs_in[0].color, 1.0);
	Build_Sphere(gl_in[0].gl_Position);
	vertexColor = vec4(gs_in[1].color, 1.0);
	Build_Sphere(gl_in[1].gl_Position);
}